using System.Linq;
using static ParserObjects.Parsers<char>;
using static ParserObjects.Sequences;

namespace ParserObjects.Tests.Parsers;

// WARNING: This file is GENERATED by the CodeGenConsole program in this solution.
// Do not edit this file directly because subsequent runs of that program will
// overwrite any changes.
public static class RulesTests
{
    private const string _input = "abcdefghijklmnopqrstuvwxyz";

    private static void TestParseSuccess(IParser<char, string> parser, int num)
    {
        var sequence = FromString(_input);
        var result = parser.Parse(sequence);
        result.Success.Should().BeTrue();
        result.Value.Should().Be(_input.Substring(0, num));
        result.Consumed.Should().Be(num);
        sequence.GetNext().Should().Be(_input[num]);
    }

    private static void TestParseFailure(IParser<char, string> parser, int failIdx)
    {
        var sequence = FromString(_input);
        var result = parser.Parse(sequence);
        result.Success.Should().BeFalse();
        result.Consumed.Should().Be(0);
        result.Parser.Should().BeSameAs(parser.GetChildren().ToList()[failIdx]);
        sequence.GetNext().Should().Be('a');
    }

    private static void TestMatchSuccess(IParser<char, string> parser, int num)
    {
        var sequence = FromString(_input);
        var result = parser.Match(sequence);
        result.Should().BeTrue();
        sequence.GetNext().Should().Be(_input[num]);
    }

    private static void TestMatchFailure(IParser<char, string> parser)
    {
        var sequence = FromString(_input);
        var result = parser.Match(sequence);
        result.Should().BeFalse();
        sequence.GetNext().Should().Be('a');
    }

    public sealed class Rule2
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            (a, b) => $"{a}{b}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b')
        ).Rule((a, b) => $"{a}{b}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(2);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(2);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 2);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 2);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 2);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 2);
        }

        [TestCase(0)]
        [TestCase(1)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule3
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            (a, b, c) => $"{a}{b}{c}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c')
        ).Rule((a, b, c) => $"{a}{b}{c}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(3);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(3);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 3);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 3);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 3);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 3);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule4
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            (a, b, c, d) => $"{a}{b}{c}{d}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d')
        ).Rule((a, b, c, d) => $"{a}{b}{c}{d}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(4);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(4);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 4);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 4);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 4);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 4);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule5
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            (a, b, c, d, e) => $"{a}{b}{c}{d}{e}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e')
        ).Rule((a, b, c, d, e) => $"{a}{b}{c}{d}{e}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(5);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(5);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 5);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 5);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 5);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 5);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule6
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            (a, b, c, d, e, f) => $"{a}{b}{c}{d}{e}{f}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f')
        ).Rule((a, b, c, d, e, f) => $"{a}{b}{c}{d}{e}{f}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(6);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(6);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 6);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 6);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 6);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 6);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule7
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g'),
            (a, b, c, d, e, f, g) => $"{a}{b}{c}{d}{e}{f}{g}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g')
        ).Rule((a, b, c, d, e, f, g) => $"{a}{b}{c}{d}{e}{f}{g}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(7);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(7);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 7);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 7);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 7);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 7);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule8
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g'),
            failIdx == 7 ? Fail<char>() : Match('h'),
            (a, b, c, d, e, f, g, h) => $"{a}{b}{c}{d}{e}{f}{g}{h}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g'),
            failIdx == 7 ? Fail<char>() : Match('h')
        ).Rule((a, b, c, d, e, f, g, h) => $"{a}{b}{c}{d}{e}{f}{g}{h}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(8);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(8);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 8);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 8);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 8);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 8);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }

    public sealed class Rule9
    {
        private static IParser<char, string> FromMethod(int failIdx = -1) => Rule(
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g'),
            failIdx == 7 ? Fail<char>() : Match('h'),
            failIdx == 8 ? Fail<char>() : Match('i'),
            (a, b, c, d, e, f, g, h, i) => $"{a}{b}{c}{d}{e}{f}{g}{h}{i}"
        );

        private static IParser<char, string> FromTuple(int failIdx = -1) => (
            failIdx == 0 ? Fail<char>() : Match('a'),
            failIdx == 1 ? Fail<char>() : Match('b'),
            failIdx == 2 ? Fail<char>() : Match('c'),
            failIdx == 3 ? Fail<char>() : Match('d'),
            failIdx == 4 ? Fail<char>() : Match('e'),
            failIdx == 5 ? Fail<char>() : Match('f'),
            failIdx == 6 ? Fail<char>() : Match('g'),
            failIdx == 7 ? Fail<char>() : Match('h'),
            failIdx == 8 ? Fail<char>() : Match('i')
        ).Rule((a, b, c, d, e, f, g, h, i) => $"{a}{b}{c}{d}{e}{f}{g}{h}{i}");

        [Test]
        public void MethodGetChildren()
        {
            var target = FromMethod();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(9);
        }

        [Test]
        public void TupleGetChildren()
        {
            var target = FromTuple();
            var result = target.GetChildren().ToList();
            result.Count.Should().Be(9);
        }

        [Test]
        public void MethodToBnf()
        {
            var target = FromMethod().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i'");
        }

        [Test]
        public void TupleToBnf()
        {
            var target = FromTuple().Named("target");
            var result = target.ToBnf();
            result.Should().Contain("target := ('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i'");
        }

        [Test]
        public void MethodParseSuccess()
        {
            TestParseSuccess(FromMethod(), 9);
        }

        [Test]
        public void TupleParseSuccess()
        {
            TestParseSuccess(FromTuple(), 9);
        }

        [Test]
        public void MethodMatchSuccess()
        {
            TestMatchSuccess(FromMethod(), 9);
        }

        [Test]
        public void TupleMatchSuccess()
        {
            TestMatchSuccess(FromTuple(), 9);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        [TestCase(8)]
        public void MethodParseFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        [TestCase(8)]
        public void MethodMatchFailure(int failIdx)
        {
            var target = FromMethod(failIdx: failIdx);
            TestMatchFailure(target);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        [TestCase(8)]
        public void TupleParseFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestParseFailure(target, failIdx);
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        [TestCase(4)]
        [TestCase(5)]
        [TestCase(6)]
        [TestCase(7)]
        [TestCase(8)]
        public void TupleMatchFailure(int failIdx)
        {
            var target = FromTuple(failIdx: failIdx);
            TestMatchFailure(target);
        }
    }
}
