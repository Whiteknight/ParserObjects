using System.Text;

namespace CodeGenConsole;

internal static class RuleTestGenerator
{
    private const string _alphabet = "abcdefghijklmnopqrstuvwxyz";

    private class Indent
    {
        public int Level { get; set; }

        public override string ToString()
            => new string(' ', Level * 4);
    }

    public static string Generate()
    {
        var sb = new StringBuilder();
        var indent = new Indent();
        sb.Append(@"using System.Linq;
using static ParserObjects.Parsers<char>;
using static ParserObjects.Sequences;

namespace ParserObjects.Tests.Parsers;

// WARNING: This file is GENERATED by the CodeGenConsole program in this solution.
// Do not edit this file directly because subsequent runs of that program will
// overwrite any changes.
public static class RulesTests
{
    private const string _input = ""abcdefghijklmnopqrstuvwxyz"";

    private static void TestParseSuccess(IParser<char, string> parser, int num)
    {
        var sequence = FromString(_input);
        var result = parser.Parse(sequence);
        result.Success.Should().BeTrue();
        result.Value.Should().Be(_input.Substring(0, num));
        result.Consumed.Should().Be(num);
        sequence.GetNext().Should().Be(_input[num]);
    }

    private static void TestParseFailure(IParser<char, string> parser, int failIdx)
    {
        var sequence = FromString(_input);
        var result = parser.Parse(sequence);
        result.Success.Should().BeFalse();
        result.Consumed.Should().Be(0);
        result.Parser.Should().BeSameAs(parser.GetChildren().ToList()[failIdx]);
        sequence.GetNext().Should().Be('a');
    }

    private static void TestMatchSuccess(IParser<char, string> parser, int num)
    {
        var sequence = FromString(_input);
        var result = parser.Match(sequence);
        result.Should().BeTrue();
        sequence.GetNext().Should().Be(_input[num]);
    }

    private static void TestMatchFailure(IParser<char, string> parser)
    {
        var sequence = FromString(_input);
        var result = parser.Match(sequence);
        result.Should().BeFalse();
        sequence.GetNext().Should().Be('a');
    }

");

        indent.Level++;
        for (int i = 2; i <= 9; i++)
        {
            GenerateRuleClass(sb, indent, i);
            sb.AppendLine();
        }

        indent.Level--;
        sb.Append($"{indent}}}");

        return sb.ToString();
    }

    private static void GenerateRuleClass(StringBuilder sb, Indent indent, int num)
    {
        sb.AppendLine($"{indent}public sealed class Rule{num}");
        sb.AppendLine($"{indent}{{");
        indent.Level++;

        // Factory method to get parser from Rule() method
        sb.Append($"{indent}private static IParser<char, string> FromMethod(int failIdx = -1) => ");
        AppendMethodParserDefinition(sb, indent, num);
        sb.AppendLine(";");

        sb.AppendLine();

        // Factory method to get parser from ().Rule() tuple extension
        sb.Append($"{indent}private static IParser<char, string> FromTuple(int failIdx = -1) => ");
        AppendTupleParserDefinition(sb, indent, num);
        sb.AppendLine(";");

        sb.AppendLine();

        // Test Method GetChildren
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void MethodGetChildren()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromMethod();");
        sb.AppendLine($"{indent}var result = target.GetChildren().ToList();");
        sb.AppendLine($"{indent}result.Count.Should().Be({num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple GetChildren
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void TupleGetChildren()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromTuple();");
        sb.AppendLine($"{indent}var result = target.GetChildren().ToList();");
        sb.AppendLine($"{indent}result.Count.Should().Be({num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Method ToBnf
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void MethodToBnf()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromMethod().Named(\"target\");");
        sb.AppendLine($"{indent}var result = target.ToBnf();");
        sb.Append($"{indent}result.Should().Contain(");
        AppendBnfString(sb, num);
        sb.AppendLine(");");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple ToBnf
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void TupleToBnf()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromTuple().Named(\"target\");");
        sb.AppendLine($"{indent}var result = target.ToBnf();");
        sb.Append($"{indent}result.Should().Contain(");
        AppendBnfString(sb, num);
        sb.AppendLine(");");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Method Parse Success
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void MethodParseSuccess()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}TestParseSuccess(FromMethod(), {num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple Parse Success
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void TupleParseSuccess()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}TestParseSuccess(FromTuple(), {num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");
        sb.AppendLine();

        // Test Method Match Success
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void MethodMatchSuccess()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}TestMatchSuccess(FromMethod(), {num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple Match Success
        sb.AppendLine($"{indent}[Test]");
        sb.AppendLine($"{indent}public void TupleMatchSuccess()");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}TestMatchSuccess(FromTuple(), {num});");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Method Parse Failure
        AppendTestCases0ToN(sb, indent, num);
        sb.AppendLine($"{indent}public void MethodParseFailure(int failIdx)");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromMethod(failIdx: failIdx);");
        sb.AppendLine($"{indent}TestParseFailure(target, failIdx);");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Method Match Failure
        AppendTestCases0ToN(sb, indent, num);
        sb.AppendLine($"{indent}public void MethodMatchFailure(int failIdx)");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromMethod(failIdx: failIdx);");
        sb.AppendLine($"{indent}TestMatchFailure(target);");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple Parse Failure
        AppendTestCases0ToN(sb, indent, num);
        sb.AppendLine($"{indent}public void TupleParseFailure(int failIdx)");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromTuple(failIdx: failIdx);");
        sb.AppendLine($"{indent}TestParseFailure(target, failIdx);");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        // Test Tuple Match Failure
        AppendTestCases0ToN(sb, indent, num);
        sb.AppendLine($"{indent}public void TupleMatchFailure(int failIdx)");
        sb.AppendLine($"{indent}{{");
        indent.Level++;
        sb.AppendLine($"{indent}var target = FromTuple(failIdx: failIdx);");
        sb.AppendLine($"{indent}TestMatchFailure(target);");
        indent.Level--;
        sb.AppendLine($"{indent}}}");

        sb.AppendLine();

        indent.Level--;
        sb.AppendLine($"{indent}}}");
    }

    private static void AppendMethodParserDefinition(StringBuilder sb, Indent indent, int num)
    {
        sb.AppendLine("Rule(");
        indent.Level++;
        AppendMatchChildrenList(sb, indent, num);
        sb.AppendLine(",");
        sb.Append(indent);
        AppendReduceMethod(sb, num);
        sb.AppendLine();
        indent.Level--;
        sb.Append($"{indent})");
    }

    private static void AppendTupleParserDefinition(StringBuilder sb, Indent indent, int num)
    {
        sb.AppendLine("(");
        indent.Level++;
        AppendMatchChildrenList(sb, indent, num);
        sb.AppendLine();
        indent.Level--;
        sb.Append($"{indent}).Rule(");
        AppendReduceMethod(sb, num);
        sb.Append(")");
    }

    private static void AppendMatchChildrenList(StringBuilder sb, Indent indent, int num)
    {
        sb.Append($"{indent}failIdx == 0 ? Fail<char>() : Match('a')");
        for (int i = 1; i < num; i++)
        {
            sb.AppendLine(",");
            sb.Append($"{indent}failIdx == {i} ? Fail<char>() : Match('{_alphabet[i]}')");
        }
    }

    private static string GetResultString(int num)
        => _alphabet.Substring(0, num);

    private static void AppendReduceMethod(StringBuilder sb, int num)
    {
        // (a, b) => $"{a}{b}"
        sb.Append("(a");
        for (int i = 1; i < num; i++)
            sb.Append($", {_alphabet[i]}");
        sb.Append(") => $\"");
        for (int i = 0; i < num; i++)
            sb.Append($"{{{_alphabet[i]}}}");
        sb.Append('\"');
    }

    private static void AppendBnfString(StringBuilder sb, int num)
    {
        sb.Append("\"target := ('a'");
        for (int i = 1; i < num; i++)
            sb.Append($" '{_alphabet[i]}'");
        sb.Append("\"");
    }

    private static void AppendTestCases0ToN(StringBuilder sb, Indent indent, int num)
    {
        for (int i = 0; i < num; i++)
            sb.AppendLine($"{indent}[TestCase({i})]");
    }
}
