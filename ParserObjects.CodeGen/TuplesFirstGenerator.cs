using System.CodeDom.Compiler;
using System.IO;

namespace ParserObjects.CodeGen
{
    internal class TuplesFirstGenerator
    {
        public string GetTuplesDefs()
        {
            var inner = new StringWriter();
            var wr = new IndentedTextWriter(inner);
            wr.WriteLine("// <auto-generated/>");
            wr.WriteLine("using System;");
            wr.WriteLine("using System.Collections.Generic;");
            wr.WriteLine();
            wr.WriteLine("namespace ParserObjects;");
            wr.WriteLine();
            wr.WriteLine("public static partial class TupleExtensions");
            wr.WriteLine("{");
            wr.Indent++;
            for (int num = 2; num <= 9; num++)
                GenerateFirstMethod(num, wr);

            wr.Indent--;
            wr.WriteLine("}");
            return inner.ToString();
        }

        private void GenerateFirstMethod(int num, IndentedTextWriter wr)
        {
            if (num > 2)
                wr.WriteLine();
            wr.WriteLine("public static partial IParser<TI, TO> First<TI, TO>(");
            WriteMethodParameters(num, wr);
            wr.WriteLine();
            wr.WriteLine(")");
            wr.WriteLine("{");
            wr.Indent++;

            wr.WriteLine("return new ParserObjects.Internal.Parsers.FirstParser<TI>.WithOutput<TO>(");
            wr.Indent++;

            WriteTupleToArrayArgument(num, wr);
            wr.WriteLine();
            wr.Indent--;

            wr.WriteLine(");");
            wr.Indent--;
            wr.WriteLine("}");
            wr.WriteLine();
        }

        private static void WriteMethodParameters(int num, IndentedTextWriter wr)
        {
            wr.Indent++;
            wr.Write("this (");
            for (int i = 1; i <= num; i++)
            {
                wr.Write($"IParser<TI, TO> P{i}");
                if (i < num)
                    wr.Write(", ");
            }

            wr.Write(") parsers");
            wr.Indent--;
        }

        private static void WriteTupleToArrayArgument(int num, IndentedTextWriter wr)
        {
            wr.Write("[");
            wr.Write("parsers.P1");
            for (int i = 2; i <= num; i++)
                wr.Write($", parsers.P{i}");
            wr.Write("]");
        }
    }
}
