namespace ParserObjects.Pratt;

/// <summary>
/// A parselet is an adaptor over IParser, with additional metadata used internally by the
/// Pratt parser.
/// </summary>
/// <typeparam name="TInput"></typeparam>
/// <typeparam name="TOutput"></typeparam>
public interface IParselet<TInput, TOutput> : INamed
{
    /// <summary>
    /// Gets a user-supplied token ID value, which is attached to all tokens generated by this
    /// parselet. The token ID value is not used internally by the engine and is only for use
    /// by the user.
    /// </summary>
    int TokenTypeId { get; }

    /// <summary>
    /// Gets the left binding power of tokens produced by this parselet.
    /// </summary>
    int Lbp { get; }

    /// <summary>
    /// Gets the right binding power of tokens produced by this parselet.
    /// </summary>
    int Rbp { get; }

    /// <summary>
    /// Gets the parser which is used by this parselet to match values.
    /// </summary>
    IParser Parser { get; }

    /// <summary>
    /// Attempts to get the next token from the input sequence.
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    (bool success, IToken<TInput, TOutput> token, int consumed) TryGetNext(IParseState<TInput> state);

    /// <summary>
    /// Gets a value indicating whether this parselet can be used as a null denominator.
    /// </summary>
    public bool CanNud { get; }

    /// <summary>
    /// Gets a value indicating whether this parselet can be used as a left denominator.
    /// </summary>
    public bool CanLed { get; }
}
